package io.integralla.xapi.model.statement

import io.circe.{Decoder, Encoder}
import io.integralla.xapi.model.common.Equivalence

/** The Correct Responses Pattern, if used, is intended to be an exhaustive list of possible correct
  * responses, each represented by a string
  *
  * @param responses
  *   A list of strings, each representing a possible correct response
  */
case class CorrectResponsePattern(responses: List[String]) extends Equivalence {

  /** Generates a signature that can be used to test logical equivalence between objects
    *
    * For the correct response pattern, the signature is generated by sorting the response strings,
    * concatenating with the usual separator, and hashing as usual
    *
    * @return
    *   A string identifier
    */
  override protected[xapi] def signature(): String = {
    hash {
      combine(responses.sorted)
    }
  }
}

object CorrectResponsePattern {
  implicit val encoder: Encoder[CorrectResponsePattern] =
    Encoder.encodeList[String].contramap(_.responses)
  implicit val decoder: Decoder[CorrectResponsePattern] =
    Decoder.decodeList[String].map[CorrectResponsePattern](CorrectResponsePattern.apply)
}
